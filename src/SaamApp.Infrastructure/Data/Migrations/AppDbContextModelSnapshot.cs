// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaamApp.Infrastructure.Data;

#nullable disable

namespace SaamApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaamApp.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccountStateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaxInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStateTypeId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("TaxInformationId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountAdjustment", b =>
                {
                    b.Property<Guid>("AccountAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountAdjustmentRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdjustmentReason")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TotalChargeCredited")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalTaxCredited")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountAdjustmentId");

                    b.HasIndex("AccountAdjustmentRefId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountAdjustment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountAdjustmentRef", b =>
                {
                    b.Property<Guid>("AccountAdjustmentRefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountAdjustmentRefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountAdjustmentRefName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountAdjustmentRefId");

                    b.ToTable("AccountAdjustmentRef");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountStateType", b =>
                {
                    b.Property<Guid>("AccountStateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountStateTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountStateTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountStateTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountStateTypeId");

                    b.ToTable("AccountStateType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressStr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AddressType", b =>
                {
                    b.Property<Guid>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Advisor", b =>
                {
                    b.Property<Guid>("AdvisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdvisorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvisorJsonResume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvisorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvisorNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvisorTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNaturalPerson")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentFrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvisorId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PaymentFrequencyId");

                    b.HasIndex("TaxInformationId");

                    b.ToTable("Advisor");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("AdvisorId");

                    b.ToTable("AdvisorAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorApplicant", b =>
                {
                    b.Property<Guid>("AdvisorApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicantNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("AdvisorApplicantId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("AdvisorApplicant");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorBank", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("AdvisorBank");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorBankTransferInfo", b =>
                {
                    b.Property<Guid>("AdvisorBankTransferInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankTransferNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdvisorBankTransferInfoId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("AdvisorBankTransferInfo");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorCustomer", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AdvisorCustomer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("AdvisorDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorEmailAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("EmailAddressTypeId");

                    b.ToTable("AdvisorEmailAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorIdentityDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdentityDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("IdentityDocumentId");

                    b.ToTable("AdvisorIdentityDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorLogin", b =>
                {
                    b.Property<Guid>("AdvisorLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdvisorLoginDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AdvisorLoginStage")
                        .HasColumnType("bit");

                    b.HasKey("AdvisorLoginId");

                    b.HasIndex("AdvisorId");

                    b.ToTable("AdvisorLogin");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorPayment", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdvisorPaymentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AdvisorPaymentsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("AdvisorPayment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorPhoneNumber", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("AdvisorPhoneNumber");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorRating", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdvisorRatingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdvisorRatingFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdvisorRatingRate")
                        .HasColumnType("int");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RatingReasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RatingReasonId");

                    b.ToTable("AdvisorRating");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiAreaExpertise", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("AiAreaExpertise");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiErrorLog", b =>
                {
                    b.Property<Guid>("AiErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ErrorTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AiErrorLogId");

                    b.ToTable("AiErrorLog");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiFeedback", b =>
                {
                    b.Property<Guid>("AiFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AISessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("UserFeedback")
                        .HasColumnType("bit");

                    b.HasKey("AiFeedbackId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AiFeedback");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiInteraction", b =>
                {
                    b.Property<Guid>("AiInteractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AiRobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AiInteractionId");

                    b.HasIndex("AiRobotId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SessionId");

                    b.ToTable("AiInteraction");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiMemory", b =>
                {
                    b.Property<Guid>("AiMemoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AiMemoryId");

                    b.ToTable("AiMemory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiModel", b =>
                {
                    b.Property<Guid>("AiModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AiModelId");

                    b.ToTable("AiModel");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiRobot", b =>
                {
                    b.Property<Guid>("AiRobotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AiRobotDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AiRobotIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("AiRobotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AiRobotUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AiRobotId");

                    b.ToTable("AiRobot");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiRobotCategory", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AiRobotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AiRobotId");

                    b.HasIndex("ComissionId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("AiRobotCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiSession", b =>
                {
                    b.Property<Guid>("AiSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfInteractions")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AiSessionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AiSession");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AppConfigParam", b =>
                {
                    b.Property<Guid>("AppConfigParamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppConfigParamDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppConfigParamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppConfigParamValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppConfigSettingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CustomerLowBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppConfigParamId");

                    b.ToTable("AppConfigParam");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccountVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoginAllowed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastFailedLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AppointmentSchedule", b =>
                {
                    b.Property<Guid>("AppointmentScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentScheduleId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AppointmentSchedule");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AreaStage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AreaId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectedFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangesMade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRoles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankSwiftCodeInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BankId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNotificationEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNotificationPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BankAccountId");

                    b.HasIndex("BankId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnit", b =>
                {
                    b.Property<Guid>("BusinessUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessEmailAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPhoneNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessUnitId");

                    b.ToTable("BusinessUnit");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("BusinessUnitAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitCategory", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("BusinessUnitCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("BusinessUnitDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitEmailAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("EmailAddressTypeId");

                    b.ToTable("BusinessUnitEmailAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitPhoneNumber", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("BusinessUnitPhoneNumber");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitType", b =>
                {
                    b.Property<Guid>("BusinessUnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessUnitTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessUnitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessUnitTypeId");

                    b.ToTable("BusinessUnitType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryStage")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Comission", b =>
                {
                    b.Property<Guid>("ComissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ComissionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComissionId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("Comission");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CanceledByAdvisor")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanceledByCustomer")
                        .HasColumnType("bit");

                    b.Property<decimal>("ConversationSumSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConversationSumTimeInSecs")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("EndedByNoBalance")
                        .HasColumnType("bit");

                    b.Property<Guid>("InteractionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("LostSignalAdvisor")
                        .HasColumnType("bit");

                    b.Property<bool?>("LostSignalCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("ReconnectConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("StillActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnansweredConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConversationId");

                    b.HasIndex("InteractionTypeId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.HasIndex("UnansweredConversationId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ConversationPayment", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AdvisorPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("ConversationPaymentStage")
                        .HasColumnType("bit");

                    b.HasKey("RowId");

                    b.HasIndex("ConversationId");

                    b.ToTable("ConversationPayment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ConversationStage", b =>
                {
                    b.Property<Guid>("ConversationStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConversationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConversationStageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConversationStageId");

                    b.ToTable("ConversationStage");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CustomerBirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerProfileThumbnailPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId");

                    b.HasIndex("GenderId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAccount", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAccount");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAiHistory", b =>
                {
                    b.Property<Guid>("CustomerAiHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InteractionTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerAiHistoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAiHistory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("CustomerDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerEmailAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("EmailAddressTypeId");

                    b.ToTable("CustomerEmailAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerFeedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerFeedback");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPayment", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SerfinsaPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SerfinsaPaymentId");

                    b.ToTable("CustomerPayment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPhoneNumber", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("CustomerPhoneNumber");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPurchase", b =>
                {
                    b.Property<Guid>("CustomerPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CustomerPurchaseTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNegative")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceIdDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerPurchaseId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPurchase");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerReview", b =>
                {
                    b.Property<Guid>("CustomerReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerReviewId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerReview");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DiscountCode", b =>
                {
                    b.Property<Guid>("DiscountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DiscountCodeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountCodePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DiscountCodeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountCodeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiscountCodeId");

                    b.HasIndex("RegionId");

                    b.ToTable("DiscountCode");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DiscountCodeRedemption", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiscountCodeRedemptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RowId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountCodeId");

                    b.ToTable("DiscountCodeRedemption");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentSecuredUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DocumentType", b =>
                {
                    b.Property<Guid>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<Guid>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddressString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailAddressId");

                    b.ToTable("EmailAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmailAddressType", b =>
                {
                    b.Property<Guid>("EmailAddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddressTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailAddressTypeId");

                    b.ToTable("EmailAddressType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmployeeHireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeJobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeeAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeeEmailAddress", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("EmailAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmailAddressTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("EmailAddressId");

                    b.HasIndex("EmailAddressTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEmailAddress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeePhoneNumber", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PhoneNumberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("EmployeePhoneNumber");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Faq", b =>
                {
                    b.Property<Guid>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FaqAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaqQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FaqId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.FinancialAccountingPeriod", b =>
                {
                    b.Property<Guid>("FinancialAccountingPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountingPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsStatementsJobRunning")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZippedStatementsSharedAccessSignatureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZippedStatementsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinancialAccountingPeriodId");

                    b.ToTable("FinancialAccountingPeriod");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.GiftCode", b =>
                {
                    b.Property<Guid>("GiftCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GiftCodeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("GiftCodeEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiftCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GiftCodeStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiftCodeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GiftCodeId");

                    b.HasIndex("RegionId");

                    b.ToTable("GiftCode");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.GiftCodeRedemption", b =>
                {
                    b.Property<Guid>("GiftCodeRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GiftCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GiftCodeRedemptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GiftCodeRedemptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GiftCodeId");

                    b.ToTable("GiftCodeRedemption");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.IdentityDocument", b =>
                {
                    b.Property<Guid>("IdentityDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentityDocumentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityDocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityDocumentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdentityDocumentId");

                    b.HasIndex("CountryId");

                    b.ToTable("IdentityDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.InteractionType", b =>
                {
                    b.Property<Guid>("InteractionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InteractionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InteractionTypeId");

                    b.ToTable("InteractionType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FinancialAccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoicedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoicingNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentState")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalSaleTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialAccountingPeriodId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<Guid>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("LineDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LineSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LineTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntry", b =>
                {
                    b.Property<Guid>("JournalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JournalEntryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceIdDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalTaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JournalEntryId");

                    b.ToTable("JournalEntry");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntryLine", b =>
                {
                    b.Property<Guid>("JournalEntryLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FinancialAccountingPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<Guid>("JournalEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JournalEntryTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JournalEntryTypeRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JournalEntryLineId");

                    b.HasIndex("AccountId");

                    b.HasIndex("FinancialAccountingPeriodId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalEntryLine");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntryReference", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JournalEntryLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JournalEntryTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JournalEntryTypeRefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("JournalEntryLineId");

                    b.ToTable("JournalEntryReference");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AiRobot")
                        .HasColumnType("bit");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBeenReadByAdvisor")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBeenReadByCustomer")
                        .HasColumnType("bit");

                    b.Property<Guid>("InteractionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChat")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVideoCall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoiceCall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoiceNote")
                        .HasColumnType("bit");

                    b.Property<bool?>("LowBalance")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageDetailSpent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MessageDetailTimeInSecs")
                        .HasColumnType("int");

                    b.Property<Guid>("MessageTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadByAdvisorAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReadByCustomerAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReplyToMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SentByAdvisor")
                        .HasColumnType("bit");

                    b.Property<bool>("SentByCustomer")
                        .HasColumnType("bit");

                    b.Property<Guid>("TemplatetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("VoiceNoteApproved")
                        .HasColumnType("bit");

                    b.Property<decimal?>("VoiceNoteSize")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MessageId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InteractionTypeId");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.MessageDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.MessageType", b =>
                {
                    b.Property<Guid>("MessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageTypeId");

                    b.ToTable("MessageType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PaymentFrequency", b =>
                {
                    b.Property<Guid>("PaymentFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentFrequencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentFrequencyValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentFrequencyId");

                    b.ToTable("PaymentFrequency");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentFrequencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PhoneNumber", b =>
                {
                    b.Property<Guid>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumberString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneNumberId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PhoneNumberType", b =>
                {
                    b.Property<Guid>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PrepaidPackage", b =>
                {
                    b.Property<Guid>("PrepaidPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("PrepaidPackageIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PrepaidPackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrepaidPackagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrepaidPackageId");

                    b.HasIndex("RegionId");

                    b.ToTable("PrepaidPackage");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PrepaidPackageRedemption", b =>
                {
                    b.Property<Guid>("PrepaidPackageRedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrepaidPackageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PrepaidPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PrepaidPackageRedemptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PrepaidPackageRedemptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PrepaidPackageId");

                    b.ToTable("PrepaidPackageRedemption");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProductChargeRateCallPerSecond")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductChargeRatePerCharacter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProductIsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductMinimumCallMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ProductMinimumCharacters")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("ComissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("ComissionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.RatingReason", b =>
                {
                    b.Property<Guid>("RatingReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RatingReasonDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingReasonId");

                    b.ToTable("RatingReason");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Region", b =>
                {
                    b.Property<Guid>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", b =>
                {
                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegionAreaAdvisorCategoryId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiMethodToCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontEndMethodToCall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFormReport")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsListReport")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParametersJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportTypeId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ReportType", b =>
                {
                    b.Property<Guid>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.SerfinsaPayment", b =>
                {
                    b.Property<Guid>("SerfinsaPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiscountCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PrepaidPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerfinsaPaymentAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentAuditNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentTimeAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentTimeAuthorize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentTimeMessageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerfinsaPaymentTimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SerfinsaPaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("PrepaidPackageId");

                    b.ToTable("SerfinsaPayment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TaxInformation", b =>
                {
                    b.Property<Guid>("TaxInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TaxInformationBusinessIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxInformationBusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxInformationCommercialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaxInformationRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxpayerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaxInformationId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("TaxpayerTypeId");

                    b.ToTable("TaxInformation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TaxpayerType", b =>
                {
                    b.Property<Guid>("TaxpayerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxpayerTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaxpayerTypeId");

                    b.ToTable("TaxpayerType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TemplateIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TemplateUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TemplateId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateCategory", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("ComissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("ComissionId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateType", b =>
                {
                    b.Property<Guid>("TemplateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TemplateTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TemplateTypeId");

                    b.ToTable("TemplateType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TenantId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingLesson", b =>
                {
                    b.Property<Guid>("TrainingLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingLessonDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingLessonPreviousLesson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingLessonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingLessonUserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingLessonVideoDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingLessonVimeoVideoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingLessonId");

                    b.ToTable("TrainingLesson");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingProgress", b =>
                {
                    b.Property<Guid>("TrainingProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingLessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TrainingProgressPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrainingProgressId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("TrainingLessonId");

                    b.ToTable("TrainingProgress");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuestion", b =>
                {
                    b.Property<Guid>("TrainingQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingQuestionValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingQuestionId");

                    b.ToTable("TrainingQuestion");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuestionOption", b =>
                {
                    b.Property<Guid>("TrainingQuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrainingQuestionOptionAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingQuestionOptionValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingQuestionOptionId");

                    b.HasIndex("TrainingQuestionId");

                    b.ToTable("TrainingQuestionOption");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuizHistory", b =>
                {
                    b.Property<Guid>("TrainingQuizHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingQuizHistoryAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingQuizHistoryStage")
                        .HasColumnType("int");

                    b.HasKey("TrainingQuizHistoryId");

                    b.HasIndex("AdvisorId");

                    b.ToTable("TrainingQuizHistory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UnansweredConversation", b =>
                {
                    b.Property<Guid>("UnansweredConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AiRobot")
                        .HasColumnType("bit");

                    b.Property<bool?>("Answered")
                        .HasColumnType("bit");

                    b.Property<bool?>("Canceled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InteractionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegionAreaAdvisorCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Unanswered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UnansweredConversationAnsweredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnansweredConversationQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UnansweredConversationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InteractionTypeId");

                    b.HasIndex("RegionAreaAdvisorCategoryId");

                    b.ToTable("UnansweredConversation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UserMembership", b =>
                {
                    b.Property<Guid>("UserMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdminSince")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAllowedToRunMobile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OwnerSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserMembershipId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserMembership");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.VoiceNoteDocument", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RowId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("MessageId");

                    b.ToTable("VoiceNoteDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Account", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.AccountStateType", "AccountStateType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStateTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.TaxInformation", "TaxInformation")
                        .WithMany("Accounts")
                        .HasForeignKey("TaxInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountStateType");

                    b.Navigation("AccountType");

                    b.Navigation("TaxInformation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountAdjustment", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.AccountAdjustmentRef", "AccountAdjustmentRef")
                        .WithMany("AccountAdjustments")
                        .HasForeignKey("AccountAdjustmentRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Account", "Account")
                        .WithMany("AccountAdjustments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("AccountAdjustmentRef");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Address", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");

                    b.Navigation("State");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Advisor", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("Advisors")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Gender", "Gender")
                        .WithMany("Advisors")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PaymentFrequency", "PaymentFrequency")
                        .WithMany("Advisors")
                        .HasForeignKey("PaymentFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.TaxInformation", "TaxInformation")
                        .WithMany("Advisors")
                        .HasForeignKey("TaxInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("Gender");

                    b.Navigation("PaymentFrequency");

                    b.Navigation("TaxInformation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Address", "Address")
                        .WithMany("AdvisorAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.AddressType", "AddressType")
                        .WithMany("AdvisorAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorAddresses")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorApplicant", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("AdvisorApplicants")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorBank", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorBanks")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("AdvisorBanks")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorBankTransferInfo", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorBankTransferInfoes")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("AdvisorBankTransferInfoes")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorCustomer", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorCustomers")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AdvisorCustomers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorDocuments")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("AdvisorDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("AdvisorDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Document");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorEmailAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorEmailAddresses")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddress", "EmailAddress")
                        .WithMany("AdvisorEmailAddresses")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddressType", "EmailAddressType")
                        .WithMany("AdvisorEmailAddresses")
                        .HasForeignKey("EmailAddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("EmailAddress");

                    b.Navigation("EmailAddressType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorIdentityDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorIdentityDocuments")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("AdvisorIdentityDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("AdvisorIdentityDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.IdentityDocument", "IdentityDocument")
                        .WithMany("AdvisorIdentityDocuments")
                        .HasForeignKey("IdentityDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Document");

                    b.Navigation("DocumentType");

                    b.Navigation("IdentityDocument");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorLogin", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorLogins")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorPayment", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorPayments")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany("AdvisorPayments")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("AdvisorPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("BankAccount");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorPhoneNumber", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorPhoneNumbers")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany("AdvisorPhoneNumbers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("AdvisorPhoneNumbers")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AdvisorRating", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorRatings")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Conversation", "Conversation")
                        .WithMany("AdvisorRatings")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AdvisorRatings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RatingReason", "RatingReason")
                        .WithMany("AdvisorRatings")
                        .HasForeignKey("RatingReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Conversation");

                    b.Navigation("Customer");

                    b.Navigation("RatingReason");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiAreaExpertise", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("AiAreaExpertises")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiFeedback", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AiFeedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiInteraction", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.AiRobot", "AiRobot")
                        .WithMany("AiInteractions")
                        .HasForeignKey("AiRobotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AiInteractions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.UserSession", "Session")
                        .WithMany("AiInteractions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AiRobot");

                    b.Navigation("Customer");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiRobotCategory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.AiRobot", "AiRobot")
                        .WithMany("AiRobotCategories")
                        .HasForeignKey("AiRobotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Comission", "Comission")
                        .WithMany("AiRobotCategories")
                        .HasForeignKey("ComissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("AiRobotCategories")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AiRobot");

                    b.Navigation("Comission");

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiSession", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AiSessions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AppointmentSchedule", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("AppointmentSchedules")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("AppointmentSchedules")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Address", "Address")
                        .WithMany("BusinessUnitAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.AddressType", "AddressType")
                        .WithMany("BusinessUnitAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("BusinessUnitAddresses")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("BusinessUnit");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitCategory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("BusinessUnitCategories")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("BusinessUnitCategories")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("BusinessUnitDocuments")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("BusinessUnitDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("BusinessUnitDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("Document");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitEmailAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("BusinessUnitEmailAddresses")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddress", "EmailAddress")
                        .WithMany("BusinessUnitEmailAddresses")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddressType", "EmailAddressType")
                        .WithMany("BusinessUnitEmailAddresses")
                        .HasForeignKey("EmailAddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("EmailAddress");

                    b.Navigation("EmailAddressType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnitPhoneNumber", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("BusinessUnitPhoneNumbers")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany("BusinessUnitPhoneNumbers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("BusinessUnitPhoneNumbers")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.City", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Comission", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("Comissions")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.InteractionType", "InteractionType")
                        .WithMany("Conversations")
                        .HasForeignKey("InteractionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("Conversations")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.UnansweredConversation", "UnansweredConversation")
                        .WithMany("Conversations")
                        .HasForeignKey("UnansweredConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InteractionType");

                    b.Navigation("RegionAreaAdvisorCategory");

                    b.Navigation("UnansweredConversation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ConversationPayment", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Conversation", "Conversation")
                        .WithMany("ConversationPayments")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Country", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Customer", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAccount", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Account", "Account")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.AddressType", "AddressType")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerAiHistory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAiHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Document");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerEmailAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerEmailAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddress", "EmailAddress")
                        .WithMany("CustomerEmailAddresses")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddressType", "EmailAddressType")
                        .WithMany("CustomerEmailAddresses")
                        .HasForeignKey("EmailAddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EmailAddress");

                    b.Navigation("EmailAddressType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerFeedback", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPayment", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.SerfinsaPayment", "SerfinsaPayment")
                        .WithMany("CustomerPayments")
                        .HasForeignKey("SerfinsaPaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("SerfinsaPayment");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPhoneNumber", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPhoneNumbers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany("CustomerPhoneNumbers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("CustomerPhoneNumbers")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerPurchase", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerPurchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.CustomerReview", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DiscountCode", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DiscountCodeRedemption", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("DiscountCodeRedemptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DiscountCode", "DiscountCode")
                        .WithMany("DiscountCodeRedemptions")
                        .HasForeignKey("DiscountCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DiscountCode");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeeAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Address", "Address")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.AddressType", "AddressType")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeeEmailAddress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.EmailAddress", "EmailAddress")
                        .WithMany("EmployeeEmailAddresses")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.EmailAddressType", "EmailAddressType")
                        .WithMany("EmployeeEmailAddresses")
                        .HasForeignKey("EmailAddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeEmailAddresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmailAddress");

                    b.Navigation("EmailAddressType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmployeePhoneNumber", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeePhoneNumbers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumber", "PhoneNumber")
                        .WithMany("EmployeePhoneNumbers")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("EmployeePhoneNumbers")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.GiftCode", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("GiftCodes")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.GiftCodeRedemption", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("GiftCodeRedemptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.GiftCode", "GiftCode")
                        .WithMany("GiftCodeRedemptions")
                        .HasForeignKey("GiftCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("GiftCode");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.IdentityDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Country", "Country")
                        .WithMany("IdentityDocuments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.FinancialAccountingPeriod", "FinancialAccountingPeriod")
                        .WithMany("Invoices")
                        .HasForeignKey("FinancialAccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialAccountingPeriod");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntryLine", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Account", "Account")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.FinancialAccountingPeriod", "FinancialAccountingPeriod")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("FinancialAccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FinancialAccountingPeriod");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntryReference", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.JournalEntryLine", "JournalEntryLine")
                        .WithMany("JournalEntryReferences")
                        .HasForeignKey("JournalEntryLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JournalEntryLine");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Message", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("Messages")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("Messages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.InteractionType", "InteractionType")
                        .WithMany("Messages")
                        .HasForeignKey("InteractionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Product", "Product")
                        .WithMany("Messages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("Messages")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Conversation");

                    b.Navigation("Customer");

                    b.Navigation("InteractionType");

                    b.Navigation("MessageType");

                    b.Navigation("Product");

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.MessageDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("MessageDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("MessageDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Message", "Message")
                        .WithMany("MessageDocuments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentType");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PrepaidPackage", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("PrepaidPackages")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PrepaidPackageRedemption", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("PrepaidPackageRedemptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PrepaidPackage", "PrepaidPackage")
                        .WithMany("PrepaidPackageRedemptions")
                        .HasForeignKey("PrepaidPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PrepaidPackage");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Comission", "Comission")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ComissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comission");

                    b.Navigation("Product");

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("RegionAreaAdvisorCategories")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Area", "Area")
                        .WithMany("RegionAreaAdvisorCategories")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Category", "Category")
                        .WithMany("RegionAreaAdvisorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Region", "Region")
                        .WithMany("RegionAreaAdvisorCategories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Area");

                    b.Navigation("Category");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Report", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.SerfinsaPayment", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("SerfinsaPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DiscountCode", "DiscountCode")
                        .WithMany("SerfinsaPayments")
                        .HasForeignKey("DiscountCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.PrepaidPackage", "PrepaidPackage")
                        .WithMany("SerfinsaPayments")
                        .HasForeignKey("PrepaidPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DiscountCode");

                    b.Navigation("PrepaidPackage");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.State", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TaxInformation", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("TaxInformations")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.TaxpayerType", "TaxpayerType")
                        .WithMany("TaxInformations")
                        .HasForeignKey("TaxpayerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("TaxpayerType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Template", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.TemplateType", "TemplateType")
                        .WithMany("Templates")
                        .HasForeignKey("TemplateTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TemplateType");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateCategory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Comission", "Comission")
                        .WithMany("TemplateCategories")
                        .HasForeignKey("ComissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("TemplateCategories")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Template", "Template")
                        .WithMany("TemplateCategories")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comission");

                    b.Navigation("RegionAreaAdvisorCategory");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("TemplateDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("TemplateDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Template", "Template")
                        .WithMany("TemplateDocuments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingProgress", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("TrainingProgresses")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.TrainingLesson", "TrainingLesson")
                        .WithMany("TrainingProgresses")
                        .HasForeignKey("TrainingLessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("TrainingLesson");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuestionOption", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.TrainingQuestion", "TrainingQuestion")
                        .WithMany("TrainingQuestionOptions")
                        .HasForeignKey("TrainingQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingQuestion");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuizHistory", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Advisor", "Advisor")
                        .WithMany("TrainingQuizHistories")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UnansweredConversation", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Customer", "Customer")
                        .WithMany("UnansweredConversations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.InteractionType", "InteractionType")
                        .WithMany("UnansweredConversations")
                        .HasForeignKey("InteractionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", "RegionAreaAdvisorCategory")
                        .WithMany("UnansweredConversations")
                        .HasForeignKey("RegionAreaAdvisorCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InteractionType");

                    b.Navigation("RegionAreaAdvisorCategory");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.VoiceNoteDocument", b =>
                {
                    b.HasOne("SaamApp.Domain.Entities.Document", "Document")
                        .WithMany("VoiceNoteDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("VoiceNoteDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaamApp.Domain.Entities.Message", "Message")
                        .WithMany("VoiceNoteDocuments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentType");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountAdjustments");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("Invoices");

                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountAdjustmentRef", b =>
                {
                    b.Navigation("AccountAdjustments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountStateType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AccountType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Address", b =>
                {
                    b.Navigation("AdvisorAddresses");

                    b.Navigation("BusinessUnitAddresses");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("EmployeeAddresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AddressType", b =>
                {
                    b.Navigation("AdvisorAddresses");

                    b.Navigation("BusinessUnitAddresses");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("EmployeeAddresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Advisor", b =>
                {
                    b.Navigation("AdvisorAddresses");

                    b.Navigation("AdvisorBankTransferInfoes");

                    b.Navigation("AdvisorBanks");

                    b.Navigation("AdvisorCustomers");

                    b.Navigation("AdvisorDocuments");

                    b.Navigation("AdvisorEmailAddresses");

                    b.Navigation("AdvisorIdentityDocuments");

                    b.Navigation("AdvisorLogins");

                    b.Navigation("AdvisorPayments");

                    b.Navigation("AdvisorPhoneNumbers");

                    b.Navigation("AdvisorRatings");

                    b.Navigation("AppointmentSchedules");

                    b.Navigation("CustomerReviews");

                    b.Navigation("Messages");

                    b.Navigation("RegionAreaAdvisorCategories");

                    b.Navigation("TrainingProgresses");

                    b.Navigation("TrainingQuizHistories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.AiRobot", b =>
                {
                    b.Navigation("AiInteractions");

                    b.Navigation("AiRobotCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Area", b =>
                {
                    b.Navigation("RegionAreaAdvisorCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BankAccount", b =>
                {
                    b.Navigation("AdvisorBankTransferInfoes");

                    b.Navigation("AdvisorBanks");

                    b.Navigation("AdvisorPayments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.BusinessUnit", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("BusinessUnitAddresses");

                    b.Navigation("BusinessUnitCategories");

                    b.Navigation("BusinessUnitDocuments");

                    b.Navigation("BusinessUnitEmailAddresses");

                    b.Navigation("BusinessUnitPhoneNumbers");

                    b.Navigation("TaxInformations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Category", b =>
                {
                    b.Navigation("RegionAreaAdvisorCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Comission", b =>
                {
                    b.Navigation("AiRobotCategories");

                    b.Navigation("ProductCategories");

                    b.Navigation("TemplateCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("AdvisorRatings");

                    b.Navigation("ConversationPayments");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("IdentityDocuments");

                    b.Navigation("States");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Customer", b =>
                {
                    b.Navigation("AdvisorCustomers");

                    b.Navigation("AdvisorRatings");

                    b.Navigation("AiFeedbacks");

                    b.Navigation("AiInteractions");

                    b.Navigation("AiSessions");

                    b.Navigation("AppointmentSchedules");

                    b.Navigation("CustomerAccounts");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerAiHistories");

                    b.Navigation("CustomerDocuments");

                    b.Navigation("CustomerEmailAddresses");

                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerPhoneNumbers");

                    b.Navigation("CustomerPurchases");

                    b.Navigation("CustomerReviews");

                    b.Navigation("DiscountCodeRedemptions");

                    b.Navigation("GiftCodeRedemptions");

                    b.Navigation("Messages");

                    b.Navigation("PrepaidPackageRedemptions");

                    b.Navigation("SerfinsaPayments");

                    b.Navigation("UnansweredConversations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DiscountCode", b =>
                {
                    b.Navigation("DiscountCodeRedemptions");

                    b.Navigation("SerfinsaPayments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Document", b =>
                {
                    b.Navigation("AdvisorDocuments");

                    b.Navigation("AdvisorIdentityDocuments");

                    b.Navigation("BusinessUnitDocuments");

                    b.Navigation("CustomerDocuments");

                    b.Navigation("MessageDocuments");

                    b.Navigation("TemplateDocuments");

                    b.Navigation("VoiceNoteDocuments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("AdvisorDocuments");

                    b.Navigation("AdvisorIdentityDocuments");

                    b.Navigation("BusinessUnitDocuments");

                    b.Navigation("CustomerDocuments");

                    b.Navigation("MessageDocuments");

                    b.Navigation("TemplateDocuments");

                    b.Navigation("VoiceNoteDocuments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmailAddress", b =>
                {
                    b.Navigation("AdvisorEmailAddresses");

                    b.Navigation("BusinessUnitEmailAddresses");

                    b.Navigation("CustomerEmailAddresses");

                    b.Navigation("EmployeeEmailAddresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.EmailAddressType", b =>
                {
                    b.Navigation("AdvisorEmailAddresses");

                    b.Navigation("BusinessUnitEmailAddresses");

                    b.Navigation("CustomerEmailAddresses");

                    b.Navigation("EmployeeEmailAddresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeAddresses");

                    b.Navigation("EmployeeEmailAddresses");

                    b.Navigation("EmployeePhoneNumbers");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.FinancialAccountingPeriod", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.GiftCode", b =>
                {
                    b.Navigation("GiftCodeRedemptions");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.IdentityDocument", b =>
                {
                    b.Navigation("AdvisorIdentityDocuments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.InteractionType", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("Messages");

                    b.Navigation("UnansweredConversations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntry", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.JournalEntryLine", b =>
                {
                    b.Navigation("JournalEntryReferences");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Message", b =>
                {
                    b.Navigation("MessageDocuments");

                    b.Navigation("VoiceNoteDocuments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.MessageType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PaymentFrequency", b =>
                {
                    b.Navigation("Advisors");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("AdvisorPayments");

                    b.Navigation("CustomerPayments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PhoneNumber", b =>
                {
                    b.Navigation("AdvisorPhoneNumbers");

                    b.Navigation("BusinessUnitPhoneNumbers");

                    b.Navigation("CustomerPhoneNumbers");

                    b.Navigation("EmployeePhoneNumbers");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PhoneNumberType", b =>
                {
                    b.Navigation("AdvisorPhoneNumbers");

                    b.Navigation("BusinessUnitPhoneNumbers");

                    b.Navigation("CustomerPhoneNumbers");

                    b.Navigation("EmployeePhoneNumbers");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.PrepaidPackage", b =>
                {
                    b.Navigation("PrepaidPackageRedemptions");

                    b.Navigation("SerfinsaPayments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Product", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("Messages");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.RatingReason", b =>
                {
                    b.Navigation("AdvisorRatings");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Region", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Countries");

                    b.Navigation("DiscountCodes");

                    b.Navigation("GiftCodes");

                    b.Navigation("PrepaidPackages");

                    b.Navigation("RegionAreaAdvisorCategories");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.RegionAreaAdvisorCategory", b =>
                {
                    b.Navigation("AdvisorApplicants");

                    b.Navigation("AiAreaExpertises");

                    b.Navigation("AiRobotCategories");

                    b.Navigation("BusinessUnitCategories");

                    b.Navigation("Comissions");

                    b.Navigation("Conversations");

                    b.Navigation("Messages");

                    b.Navigation("ProductCategories");

                    b.Navigation("TemplateCategories");

                    b.Navigation("UnansweredConversations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.ReportType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.SerfinsaPayment", b =>
                {
                    b.Navigation("CustomerPayments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.State", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TaxInformation", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Advisors");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TaxpayerType", b =>
                {
                    b.Navigation("TaxInformations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.Template", b =>
                {
                    b.Navigation("TemplateCategories");

                    b.Navigation("TemplateDocuments");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TemplateType", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingLesson", b =>
                {
                    b.Navigation("TrainingProgresses");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.TrainingQuestion", b =>
                {
                    b.Navigation("TrainingQuestionOptions");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UnansweredConversation", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("SaamApp.Domain.Entities.UserSession", b =>
                {
                    b.Navigation("AiInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
