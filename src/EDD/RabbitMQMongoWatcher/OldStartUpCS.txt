using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.ObjectPool;
using RabbitMQ.Client;

using RabbitMQMongoWatcher.Web.Interfaces;
using RabbitMQMongoWatcher.Web.Services;
using SaamAppLib.SharedKernel.Interfaces;
using MediatR;
using System.Reflection;
using MassTransit;

namespace RabbitMQMongoWatcher
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();

            // configure site settings
            var siteSettings = Configuration.GetSection("SiteSettings");
            services.Configure<SiteConfiguration>(siteSettings);

            // configure email sending
            var mailserverConfig = Configuration.GetSection("Mailserver");
            services.Configure<MailserverConfiguration>(mailserverConfig);
            services.AddSingleton<ISendEmail, SmtpEmailSender>();
            services.AddSingleton<ISendConfirmationEmails, ConfirmationEmailSender>();


            // configure MediatR

            services.AddMediatR(typeof(Startup).Assembly);
            //https://github.com/jbogard/MediatR/wiki/Migration-Guide-11.x-to-12.0
            //services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblies(typeof(Startup).Assembly));

            // configure messaging
            var messagingConfig = Configuration.GetSection("RabbitMq");
            var messagingSettings = messagingConfig.Get<RabbitMqConfiguration>();
            services.Configure<RabbitMqConfiguration>(messagingConfig);
            services.AddSingleton<IApplicationMessagePublisher, RabbitApplicationMessagePublisher>();
            services.AddSingleton<ObjectPoolProvider, DefaultObjectPoolProvider>();
            services.AddSingleton<IPooledObjectPolicy<IModel>, RabbitModelPooledObjectPolicy>();
            if (messagingSettings.Enabled)
            {
                services.AddHostedService<RabbitMQMongoService>();
            }

            //// add MassTransit
            //services.AddMassTransit(busRegConfigurator =>
            //    {
            //        busRegConfigurator.SetKebabCaseEndpointNameFormatter();
            //        busRegConfigurator.UsingRabbitMq((context, configurator) =>
            //        {
            //            RabbitMqConfiguration settings = context.GetRequiredService<RabbitMqConfiguration>();
            //            configurator.Host(new Uri(settings.Hostname), x =>
            //            {
            //                x.Username(settings.UserName);
            //                x.Password(settings.Password);
            //            });

            //        });
            //    }
            //);

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }
            // disabled because of docker setup required
            //app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints => endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}"));
        }
    }
}
