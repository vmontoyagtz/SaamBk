https://medium.com/younited-tech-blog/end-to-end-test-a-blazor-app-with-playwright-part-1-224e8894c0f3
Microsoft Playwright is a Node.js library for automating web browsers such as Chrome, Firefox, and Safari. It allows developers to write end-to-end tests for web applications that can be run in multiple browsers and operating systems.
Playwright provides a high-level API for automating actions in the browser, such as clicking buttons, filling out forms, and navigating between pages. It also includes features for controlling browser settings, handling cookies and browser storage, and taking screenshots.
One of the key benefits of Playwright is its ability to run tests in parallel across multiple browsers, which can significantly reduce the time it takes to run a full suite of tests. It also includes features for debugging and troubleshooting tests, such as capturing and inspecting network requests and console output.
Playwright is a powerful tool for testing web applications, and it can help developers ensure that their applications work correctly and consistently across different browsers and platforms.
Microsoft Playwright has a plugin called "Playwright for Blazor" that enables you to automatically generate tests for your ASP.NET Core Blazor application.
This plugin provides a set of APIs that allow you to simulate user interactions with your Blazor app, such as clicking buttons, filling out forms, and navigating between pages. It also includes features for capturing screenshots, debugging tests, and running tests in parallel.
To use Playwright for Blazor, you need to install the Playwright NuGet package and add the necessary configuration to your test project. Once you've done this, you can write your tests using the Playwright API and run them using your preferred test runner.
Playwright for Blazor can be a powerful tool for automating your Blazor app testing, helping you to catch bugs and ensure that your app is working correctly across different browsers and platforms.
Microsoft Playwright is primarily designed for testing the user interface of web applications, so it is well-suited for testing the presentation layer of your C# Clear architecture app. This includes testing user interactions such as filling out forms, clicking buttons, and navigating between pages.
In terms of other parts of a Clean architecture solution that we can test with Playwright, we can also use it to test the integration between the presentation layer and other layers of our app, such as the application layer or the domain layer. For example, you can use Playwright to test that user inputs are being correctly processed by your app's business logic, and that the resulting output is correctly displayed in the UI.
However, it's important to note that Playwright is not designed for testing the lower-level implementation details of your app, such as data access or database interactions. For those types of tests, you would need to use a different testing framework, such as xUnit or NUnit.
As for other plugins that you can use with Microsoft Playwright, there are several available that can help you to enhance your testing capabilities. For example, there is a plugin for generating performance metrics during your tests, a plugin for testing accessibility compliance, and a plugin for visual regression testing. You can find more information about these plugins and others on the Playwright website.
