Entities are the fundamental building blocks of a domain. They embody enterprise-wide business rules and attributes, representing business models and defining what a particular model can do, when it can do it, and under what conditions. For instance, an entity can represent a User, Product, Booking, Ticket, or Wallet, among others.
The primary responsibility of an entity is to encapsulate domain business logic, rather than having it spread out in services, which can lead to an Anemic Domain Model. An entity must be valid at all times, and there are specific invariants that an object must always uphold. For example, an order item object should always have a positive integer quantity, an article name, and a price, making invariants enforce the responsibility of the domain entities, especially the aggregate root.
Each entity has an identity that makes it distinct from others and is consistent throughout its lifecycle. Two entities' equality is determined by comparing their identifiers, usually through their id fields. An entity can contain other objects, such as entities or value objects, and is responsible for coordinating operations on the objects it owns. Entities have no knowledge of upper layers like services or controllers, as they contain domain-specific data that accommodates business logic and not some database schema.
Entities must protect their invariants, avoiding public setters and updating state using methods that execute invariant validation on each update if required. Validation can occur in a simple validate() method that ensures no business rules are violated during updates. It's critical to ensure that entities are consistent on creation and that all domain objects are validated and validated on creation, throwing an error on the first failure to fail fast.
To avoid no-arg constructors, all required properties should be accepted and validated in a constructor or a factory method like create(). For optional properties that require complex setup, the Fluent interface and Builder Pattern can be used. It's also advisable to make entities partially immutable, identifying properties that shouldn't change after creation and making them read-only, such as id or createdAt.
While creating one module per entity may seem like a good idea, it's not ideal. Each module may contain multiple entities, and it's critical to group entities with related business logic together. Avoid grouping unrelated entities in one module, as doing so can cause confusion and make the domain model harder to maintain.
