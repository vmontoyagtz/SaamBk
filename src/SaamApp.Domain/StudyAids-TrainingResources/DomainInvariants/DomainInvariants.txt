Domain invariants refer to the policies and conditions that must always be met for a specific domain in a particular context. These invariants define what is possible or prohibited within the context.
Enforcing invariants is the responsibility of domain objects, particularly entities and aggregate roots. Each object has a set of invariants that must always be true. For instance, when transferring money, the amount must always be a positive integer, and there must be a receiver credit card number in the correct format.
If the business has similar rules, the domain object should not exist unless it follows these rules. Domain invariants are essential to ensure that the software functions correctly and is of high quality.
For example, in the case of a banking application, you might define an invariant that states that a customer can only withdraw funds from their account if they have a sufficient balance. This would prevent customers from overdrawing their accounts and incurring fees or other penalties. Similarly, in an e-commerce system, you might define an invariant that ensures that customers cannot place orders for products that are out of stock. This would prevent stock shortages and help manage customer expectations.
Enforcing domain invariants is typically the responsibility of domain objects such as entities and aggregate roots. These objects must ensure that their state always satisfies the invariants that have been defined for them. This can be accomplished through various techniques such as validating input, checking state transitions, or using preconditions and postconditions to enforce the necessary conditions.
here are 4 real-life examples of domain invariants:
In a messaging application, a message can't be sent without a recipient. This is an invariant that must be enforced to ensure the message is delivered correctly. Additionally, a message can't be empty, and it has a maximum character limit. These are also invariants that ensure the message is valid and can be processed correctly.
In a flight booking system, a passenger can't book a flight if there are no available seats. This is an invariant that must be enforced to ensure the passenger has a valid booking. Additionally, a passenger can't book a flight that departs before they arrive at the airport. This is another invariant that must be enforced to ensure the booking is valid.
A hospital scheduling system needs to enforce the rule that a doctor cannot be scheduled to work more than a certain number of hours per day or week. This is a domain invariant because it is a policy that must always be followed in the context of the hospital's scheduling system. The system should enforce this rule to prevent burnout and ensure the safety and well-being of the doctors and patients.
A shipping company has a rule that a package cannot be shipped to a certain country due to legal restrictions. This is a domain invariant because it is a condition that must always be true in the context of the shipping company's business. The system should enforce this rule to prevent legal issues and ensure compliance with relevant regulations.
Overall, the use of domain invariants is an essential aspect of designing a domain model that is well-suited to your specific business context. By carefully considering the rules and constraints that are unique to your application, you can create a set of invariants that help to ensure the correctness and consistency of your system, and enable you to build high-quality, reliable software.
